package main

import (
	"fmt"
)

// type TunnelChecker struct {
// 	pinger *ping.Pinger
// }

// var wg *sync.WaitGroup

// func f(from string, wg *sync.WaitGroup) {
// 	for i := 0; i < 3; i++ {
// 		fmt.Println(from, ":", i)
// 	}
// 	wg.Done()
// }

// func g(from string, wg *sync.WaitGroup) {
// 	for i := 0; i < 3; i++ {
// 		fmt.Println(from, ":", i)
// 	}
// 	wg.Done()
// }

// func worker(id int) {
// 	fmt.Printf("Worker %d starting\n", id)

// 	// time.Sleep(time.Second)
// 	// fmt.Printf("Worker %d done\n", id)
// }

// func sum(a, b int) int {
// 	time.Sleep(time.Second * 2)
// 	return a + b
// }

func greet(c chan string) {

	name := <-c // receiving value from channel
	fmt.Println("Hello", name)
}

func Map() {

	// wg := &sync.WaitGroup{}

	// s := []int{7, 2, 8, -9, 4, 0}

	// c := make(chan string)
	// go sum(1, 2)
	// go greet(c)

	// c <- "World"
	// close(c)

	// map()

	// go sum(s[:len(s)/2], c)
	// go sum(s[len(s)/2:], c)
	// x, y := <-c, <-c // receive from c

	// fmt.Println(x, y, x+y)

	// f("direct")

	// wg.Add(2)

	// go g("goroutine2", wg)
	// go f("goroutine", wg)

	// wg.Wait()

	// time.Sleep(time.Second * 2)

	// go func(msg string) {
	// 	fmt.Println(msg)
	// }("going")

	// time.Sleep(time.Second)
	// fmt.Println("done")

	// for i := 1; i <= 5; i++ {
	// 	wg.Add(1)

	// 	i := i

	// 	go func() {
	// 		defer wg.Done()
	// 		worker(i)
	// 	}()

	// }

	// wg.Wait()

	// fmt.Println("Checking ping status everything fine")

	// nums := []int{1, 2, 3}

	// for i := range nums {
	// 	if i == 0 {
	// 		continue
	// 	}
	// 	fmt.Println(i)
	// }

	// "github.com/go-ping/ping"

	//wg := &sync.WaitGroup{}
	//wg.Add(1)

	//t := TunnelChecker{}
	//t.NewPing(wg)
	// pinger, err := ping.NewPinger("www.google.com")
	// if err != nil {
	// 	panic(err)
	// }
	// pinger.Count = 3
	// err = pinger.Run() // Blocks until finished.
	// if err != nil {
	// 	panic(err)
	// }
	// stats := pinger.Statistics() // get send/receive/duplicate/rtt stats
	// fmt.Println(stats.Addr)

}

// func (t *TunnelChecker) startPing(host string) error {
// 	pinger, err := ping.NewPinger(host)
// 	if err != nil {
// 		fmt.Println("pinger create failed", err.Error())
// 		return err
// 	}
// 	t.pinger = pinger
// 	pinger.Count = 3
// 	pinger.Interval = time.Second
// 	pinger.Timeout = 3 * time.Second
// 	pinger.SetPrivileged(false)
// 	pinger.OnFinish = t.onFinishCb

// 	pinger.Run()
// 	// if err != nil {
// 	// 	fmt.Println("Failed to start the ping", err.Error())
// 	// }

// 	return nil
// }

// func (t *TunnelChecker) onFinishCb(stats *ping.Statistics) {
// 	fmt.Println(stats.IPAddr.IP)
// }

// func (t *TunnelChecker) NewPing(wg *sync.WaitGroup) {
// 	err := t.startPing("www.google.com")
// 	if err != nil {
// 		fmt.Println("Ping failed", err.Error())
// 	}
// 	wg.Done()
// }
